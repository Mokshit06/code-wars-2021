// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum SocialProvider {
  GOOGLE
}

// enum ProductStatus {
//   ACTIVE
//   DRAFT
// }

model User {
  id        String         @id @default(uuid())
  name      String
  image     String?
  email     String?        @unique
  socialId  String         @unique
  provider  SocialProvider
  stores    Store[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model StoreUser {
  id        String   @id @default(uuid())
  name      String
  email     String
  password  String
  store     Store    @relation(fields: [storeId], references: [id])
  orders    Order[]
  storeId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, storeId])
}

model Store {
  id          String      @id @default(uuid())
  name        String      @unique
  domain      String      @unique
  address     String
  apartment   String
  city        String
  country     String
  state       String
  pinCode     String
  phoneNumber String
  website     String?
  pages       Page[]
  products    Product[]
  owner       User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  customers   StoreUser[]
}

enum PageType {
  HOME_PAGE
  LOGIN_PAGE
  REGISTRATION_PAGE
  PRODUCTS_LIST_PAGE
  SINGLE_PRODUCT_PAGE
  CART_PAGE
}

model Page {
  id               String   @id @default(uuid())
  // path             String
  type             PageType
  rawTemplate      String
  compiledTemplate String?
  css              String
  rawJs            String
  compiledJs       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  store            Store?   @relation(fields: [storeId], references: [id])
  storeId          String?
}

model Product {
  id            String         @id @default(uuid())
  slug          String
  name          String
  // status        ProductStatus
  description   String?
  availability  Int?
  sku           String?
  price         Int
  currency      String         @default("INR")
  images        String[]
  store         Store          @relation(fields: [storeId], references: [id])
  storeId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  orderProducts OrderProduct[]
}

model Order {
  id              String         @id @default(uuid())
  note            String?
  products        OrderProduct[]
  customer        StoreUser      @relation(fields: [customerId], references: [id])
  customerId      String
  shippingAddress String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model OrderProduct {
  id        String   @id @default(uuid())
  quantity  Int
  price     Int
  discount  Int      @default(0)
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Theme {
  id       String @id @default(uuid())
  name     String
  image    String
  template String
  css      String
  js       String
}

model Session {
  sid    String   @id
  sess   Json
  expire DateTime

  @@index([expire], name: "IDX_session_expire")
  @@map("session")
}
